{
    "contents" : "library(shiny)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(dplyr)\n\nmortgage <- function(P = 500000, I = 6, L = 30, monthly_pmt = NA) { \n  \n  # Definitions: \n  #   P = principal, the initial amount of the loan\n  #   I = annual interest rate\n  #   L = length of the loan in years, or at least the length over which the loan is amortized.\n  #   J = monthly interest in decimal form = I / (12 x 100)\n  #   M = monthly payment; formula: M = P * ( J / (1 - (1 + J) ^ -N))\n  #   N = number of months over which loan is amortized = L x 12\n  # see also: http://www.jeacle.ie/mortgage/instructions.html\n  #\n  # Added:\n  #   monthly_pmt = a monthly payment you could consistently pay more quickly pay off principal\n  #\n  \n  J <- I / (12 * 100)\n  N <- 12 * L\n  M <- P * J/(1-(1+J)^(-N))\n  monthPay <- M\n  \n  # Calculate Amortization for each Month\n  Pt <- P # current principal or amount of the loan\n  currP <- NULL\n  \n  if (!is.na(monthly_pmt)) {\n    M <- monthly_pmt\n    monthPay <- M\n  }\n  while(Pt >= 0) {\n    H <- Pt * J # this is the current monthly interest\n    C <- M - H # this is your monthly payment minus your monthly interest, so it is the amount of principal you pay for that month\n    Q <- Pt - C # this is the new balance of your principal of your loan\n    Pt <- Q # sets P equal to Q and goes back to step 1. The loop continues until the value Q (and hence P) goes to zero\n    currP <- c(currP, Pt)\n  }\n  \n  monthP <- c(P, currP[1:(length(currP)-1)]) - currP\n  aDFmonth <- data.frame(\n    Amortization=c(P, currP[1:(length(currP)-1)]), \n    Monthly_Payment=monthP+c((monthPay-monthP)[1:(length(monthP)-1)],0),\n    Monthly_Principal=monthP, \n    Monthly_Interest=c((monthPay-monthP)[1:(length(monthP)-1)],0), \n    Year=sort(rep(1:ceiling(N/12), 12))[1:length(monthP)]\n  )\n  \n  aDFyear <- data.frame(\n    Amortization=tapply(aDFmonth$Amortization, aDFmonth$Year, max), \n    Annual_Payment=tapply(aDFmonth$Monthly_Payment, aDFmonth$Year, sum), \n    Annual_Principal=tapply(aDFmonth$Monthly_Principal, aDFmonth$Year, sum), \n    Annual_Interest=tapply(aDFmonth$Monthly_Interest, aDFmonth$Year, sum), \n    Year=as.vector(na.omit(unique(aDFmonth$Year)))\n  )\n  \n  return(\n    invisible(\n      list(\n        monthly_payment = monthPay,\n        monthly_amort = aDFmonth,\n        yearly_amort = aDFyear\n      )\n    )\n  )    \n}\n\n# input = list(house_price = NA, down_payment = NA, interest = NA)\n\nshinyServer(\n  function(input, output) {\n  \n  #   if(plotData==T) {\n  #     barplot(t(aDFyear[,c(3,4)]), \n  #             col=c(\"blue\", \"red\"), \n  #             main=\"Annual Interest and Principal Payments\", \n  #             sub=\"The data for this plot is stored in aDFyear.\",\n  #             xlab=\"Years\", ylab=\"$ Amount\", \n  #             legend.text=c(\"Principal\", \"Interest\"), \n  #             ylim=c(0, max(aDFyear$Annual_Payment)*1.3))\n  #   }\n  #   \n  \n  # compute our payment schedule\n  compute_mortgage <- reactive({\n    print (input$monthly_pmt)\n    \n    loan_amount = input$house_price - input$down_payment\n    mort_calcs = mortgage(P = loan_amount, I = input$interest, \n                          L = input$loan_duration, \n                          monthly_pmt = input$monthly_pmt)\n    \n  })\n\n  # monthly payment\n  output$monthly_pmt <- renderText({\n    paste0('Monthly payment would be $', \n           round(compute_mortgage()$monthly_payment, digits = 2))\n  })\n  \n  # interst and principal over time\n  output$int_vs_prin <- renderPlot({\n    month_melt = melt(compute_mortgage()$monthly_amort, id.vars = 'Year')\n    month_melt %>%\n        filter(variable %in% c(\"Monthly_Principal\", \"Monthly_Interest\")) %>%\n        group_by(variable) %>%\n        mutate(x_axis = row_number()) %>%\n        ggplot(aes(x = x_axis, y = value, color = variable)) +\n          geom_line() + scale_x_continuous(breaks = 0:30 * 12, labels = 0:30) + \n          ylab('Amount ($)') + xlab('Year') + \n          scale_color_brewer(palette = 'Dark2') + ggtitle('Interest Vs Principal')\n    })\n  \n  # cumulative values for these\n  output$cum_plot <- renderPlot({\n    \n    year_vals = compute_mortgage()$yearly_amort\n    year_melt = melt(year_vals, id.vars = 'Year')\n    \n    year_melt %>%\n      filter(variable %in% c(\"Annual_Principal\", \"Annual_Interest\", \n                             'Annual_Payment')) %>%\n      group_by(variable) %>%\n      mutate(cum_val = cumsum(value)) %>%\n      ggplot(aes(x = Year, y = cum_val, color = variable)) +\n      geom_line() + scale_x_continuous(breaks = 0:30, labels = 0:30) + \n      scale_y_continuous(breaks = seq(0, ceiling(sum(year_vals$Annual_Payment) \n                                               / 10000) * 10000, 10000), \n                         labels = seq(0, ceiling(sum(year_vals$Annual_Payment) \n                                                 / 10000) * 10000, 10000)) + \n      ylab('Amount ($)') + xlab('Year') + \n      scale_color_brewer(palette = 'Dark2') + \n      ggtitle('Cumulative Interest & Principal') + \n      geom_hline(yintercept = input$house_price * .2)\n  })  \n  \n  }\n)\n",
    "created" : 1420227085775.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2469021580",
    "id" : "740885A3",
    "lastKnownWriteTime" : 1420300164,
    "path" : "~/projects/mortgage-sumulator/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}